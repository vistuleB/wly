import gleam/list
import gleam/option
import gleam/string.{inspect as ins}
import infrastructure.{type Desugarer, Desugarer, type DesugarerTransform, type DesugaringError} as infra
import nodemaps_2_desugarer_transforms as n2t
import vxml.{type VXML, V}

fn update_children(
  children: List(VXML),
  inner: InnerParam,
) -> List(VXML) {
  use #(first, rest) <- on.error_ok(
    infra.first_rest(children),
    fn(_){[]},
  )

  let first_is_absorber = infra.is_v_and_tag_equals(first, inner.0)

  list.fold(
    over: rest,
    from: #(first, first_is_absorber, []),
    with: fn(
      acc: #(VXML, Bool, List(VXML)),
      incoming: VXML,
    ) -> #(VXML, Bool, List(VXML)) {
      let #(prev, prev_is_absorber, already_bundled) = acc
      case prev_is_absorber && infra.is_v_and_tag_is_one_of(incoming, inner.1) {
        True -> {
          let assert V(_, _, _, prev_children) = prev
          #(
            V(..prev, children: list.append(prev_children, [incoming])),
            True,
            already_bundled,
          )
        }
        False -> #(
          incoming,
          infra.is_v_and_tag_equals(incoming, inner.0),
          [prev, ..already_bundled]
        )
      }
    }
  )
  |> fn(acc){[acc.0, ..acc.2]}
  |> list.reverse
}

fn nodemap(
  node: VXML,
  inner: InnerParam,
) -> VXML {
  case node {
    V(blame, tag, attributes, children) ->
      V(blame, tag, attributes, update_children(children, inner))
    _ -> node
  }
}

fn nodemap_factory(inner: InnerParam) -> n2t.OneToOneNoErrorNodeMap {
  nodemap(_, inner)
}

fn transform_factory(inner: InnerParam) -> DesugarerTransform {
  nodemap_factory(inner)
  |> n2t.one_to_one_no_error_nodemap_2_desugarer_transform()
}

fn param_to_inner_param(param: Param) -> Result(InnerParam, DesugaringError) {
  Ok(param)
}

type Param = #(String,        List(String))
//             â†–              â†–
//             tag that       tags that will
//             will absorb    be absorbed by
//             next sibling   previous sibling
type InnerParam = Param

const name = "absorb_next_sibling_while_no_list"
const constructor = absorb_next_sibling_while_no_list

//------------------------------------------------53
/// if the arguments are [#("Tag1", "Child1"),
/// ("Tag1", "Child1")] then will cause Tag1
/// nodes to absorb all subsequent Child1 & Child2
/// nodes, as long as they come immediately after
/// Tag1 (in any order)
pub fn absorb_next_sibling_while_no_list(param: Param) -> Desugarer {
  Desugarer(
    name,
    option.Some(ins(param)),
    "
/// if the arguments are [#(\"Tag1\", \"Child1\"), 
/// (\"Tag1\", \"Child1\")] then will cause Tag1
/// nodes to absorb all subsequent Child1 & Child2
/// nodes, as long as they come immediately after
/// Tag1 (in any order)
    ",
    case param_to_inner_param(param) {
      Error(error) -> fn(_) { Error(error) }
      Ok(inner) -> transform_factory(inner)
    }
  )
}

// ðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠ
// ðŸŒŠðŸŒŠðŸŒŠ tests ðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠ
// ðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠ
fn assertive_tests_data() -> List(infra.AssertiveTestData(Param)) {
  [
    infra.AssertiveTestData(
      param: #("Absorber", ["Absorbee"]),
      source:   "
                  <> Root
                    <> Absorber
                      <> 
                        \"text\"
                    <> Absorbee
                    <> last
                ",
      expected: "
                  <> Root
                    <> Absorber
                      <> 
                        \"text\"
                      <> Absorbee
                    <> last
                ",
    ),
    infra.AssertiveTestData(
      param: #("Absorber", ["Absorbee"]),
      source:   "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                  <> Absorbee
                  <> Absorbee
                  <> last
                ",
      expected: "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                    <> Absorbee
                    <> Absorbee
                  <> last
                ",
    ),
    infra.AssertiveTestData(
      param: #("Absorber", ["Absorbee"]),
      source:   "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                  <> Absorbee
                  <> last
                  <> Absorbee
                ",
      expected: "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                    <> Absorbee
                  <> last
                  <> Absorbee
                "
    ),
  ]
}

pub fn assertive_tests() {
  infra.assertive_test_collection_from_data(name, assertive_tests_data(), constructor)
}