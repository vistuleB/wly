import gleam/dict.{type Dict}
import gleam/list
import gleam/option.{type Option, Some, None}
import gleam/regexp.{type Regexp, type Match, Match}
import gleam/result
import gleam/string.{inspect as ins}
import infrastructure.{type Desugarer, Desugarer, type DesugarerTransform, type DesugaringError, type DesugaringWarning, DesugaringError, DesugaringWarning} as infra
import nodemaps_2_desugarer_transforms as n2t
import vxml.{type Attribute, type Line, type VXML, Attribute, Line, T, V}
import blame.{type Blame} as bl
import on

fn extract_handle_name(match) -> #(String, Bool) {
  let assert Match(_, [_, option.Some(handle_name)]) = match
  case string.ends_with(handle_name, ":page") {
    True -> {
      #(handle_name |> string.drop_end(5), True)
    }
    False -> #(handle_name, False)
  }
}

fn hyperlink_constructor(
    handle: #(String, String, String),
    page: Bool,
    blame: Blame,
    state: State,
    inner: InnerParam,
) -> Result(VXML, DesugaringError) {
  use our_path <- on.lazy_none_some(
    state.path,
    fn(){ Error(DesugaringError(blame, "handle occurrence when local path is not defined")) },
  )
  let #(value, id, target_path) = handle
  let #(tag, attrs) = case target_path == our_path {
    True -> #(inner.1, inner.3)
    False -> #(inner.2, inner.4)
  }
  let target_path = case page {
    True -> target_path
    False -> target_path <> "#" <> id
  }
  let attrs = [
    Attribute(blame, "href", target_path),
    ..attrs
  ]
  Ok(V(
    blame,
    tag,
    attrs,
    [T(blame, [Line(blame, value)])],
  ))
}

type TripleThreat(a, b, c) {
  Success(a)
  Warning(b)
  Failure(c)
}

fn warning_element(
  handle_name: String,
  blame: Blame,
) -> VXML {
  V(
    desugarer_blame(66),
    "span",
    [Attribute(desugarer_blame(68), "style", "color:red;background-color:yellow;")],
    [T(desugarer_blame(69), [Line(desugarer_blame(69), "undefined handle at " <> bl.blame_digest(blame) <> ": " <> handle_name)])],
  )
}

fn hyperlink_maybe(
  handle_and_page: #(String, Bool),
  blame: Blame,
  state: State,
  inner: InnerParam,
) -> TripleThreat(VXML, #(VXML, DesugaringWarning), DesugaringError) {
  let #(handle_name, page) = handle_and_page
  case dict.get(state.handles, handle_name) {
    Ok(triple) -> case hyperlink_constructor(triple, page, blame, state, inner) {
      Ok(vxml) -> Success(vxml)
      Error(e) -> Failure(e)
    }
    _ -> {
      Warning(#(
        warning_element(handle_name, blame),
        DesugaringWarning(blame, "handle '" <> handle_name <> "' is not assigned"),
      ))
    }
  }
}

fn is_failure(threat: TripleThreat(a, b, c)) -> Bool {
  case threat {
    Failure(_) -> True
    _ -> False
  }
}

fn matches_2_hyperlinks(
  matches: List(Match),
  blame: Blame,
  state: State,
  inner: InnerParam,
) -> Result(#(List(VXML), List(DesugaringWarning)), DesugaringError) {
  let threats =
    matches
    |> list.map(extract_handle_name)
    |> list.map(hyperlink_maybe(_, blame, state, inner))

  use _ <- on.ok_error(
    list.find(threats, is_failure),
    fn (f) {
      let assert Failure(desugaring_error) = f
      Error(desugaring_error)
    },
  )

  list.fold(
    threats,
    #([], []),
    fn (acc, t) {
      case t {
        Failure(_) -> panic as "bug"
        Success(link_element) -> #([link_element, ..acc.0], acc.1)
        Warning(#(warning_span, warning)) -> #([warning_span, ..acc.0], [warning, ..acc.1])
      }
    }
  )
  |> fn(pair) { #(pair.0 |> list.reverse, pair.1 |> list.reverse) }
  |> Ok
}

fn augment_to_1_mod_3(
  splits: List(String),
) -> List(String) {
  case list.length(splits) % 3 != 1 {
    True -> {
      let assert True = list.is_empty(splits)
      [""]
    }
    False -> splits
  }
}

fn retain_0_mod_3(
  splits: List(String),
) -> List(String) {
  splits
  |> list.index_fold(
    from: [],
    with: fn(acc, split, index) {
      case index % 3 == 0 {
        True -> [split, ..acc]
        False -> acc
      }
    }
  )
  |> list.reverse
}

fn split_2_t(
  split: String,
  blame: Blame,
) -> VXML {
  T(blame, [Line(blame, split)])
}

fn splits_2_ts(
  splits: List(String),
  blame: Blame,
) -> List(VXML) {
  splits
  |> augment_to_1_mod_3
  |> retain_0_mod_3
  |> list.map(split_2_t(_, blame))
}

fn process_line(
  line: Line,
  state: State,
  inner: InnerParam,
) -> Result(#(List(VXML), List(DesugaringWarning)), DesugaringError) {
  let Line(blame, content) = line
  case regexp.scan(inner.5, content) {
    [_, ..] as matches -> {
      let splits = regexp.split(inner.5, content)
      use #(hyperlinks, warnings) <- on.ok(
        matches_2_hyperlinks(matches, blame, state, inner)
      )
      let text_nodes = splits_2_ts(splits, blame)
      Ok(#(list.interleave([text_nodes, hyperlinks]), warnings))
    }
    [] -> Ok(#([T(line.blame, [line])], []))
  }
}

fn process_lines(
  lines: List(Line),
  state: State,
  inner: InnerParam,
) -> Result(#(List(VXML), List(DesugaringWarning)), DesugaringError) {
  use big_list <- on.ok(
    lines
    |> list.map(process_line(_, state, inner))
    |> result.all
  )

  let #(list_list_vxml, list_list_warnings) = big_list |> list.unzip

  let vxmls =
    list_list_vxml
    |> list.flatten                          // you now have a list of t-nodes and of hyperlinks
    |> infra.plain_concatenation_in_list     // adjacent t-nodes are wrapped into single t-node, with 1 line per old t-node (pre-concatenation)

  let warnings =
    list_list_warnings
    |> list.flatten

  Ok(#(vxmls, warnings))
}

fn get_handles_instances_from_grand_wrapper(
  attributes: List(Attribute),
) -> HandlesDict {
  attributes
  |> list.filter(fn(att) {att.key == "handle"})
  |> list.fold(
    dict.new(),
    fn(acc, att) {
      let assert [handle_name, value, id, path] = att.value |> string.split("|")
      dict.insert(acc, handle_name, #(value, id, path))
    }
  )
}

fn substitute_in_href(
  attr: Attribute,
  state: State,
) -> Result(Attribute, DesugaringWarning) {
  use <- on.false_true(
    attr.key == "href",
    Ok(attr),
  )
  use <- on.false_true(
    attr.value |> string.starts_with(">>"),
    Ok(attr),
  )
  let handle_name = attr.value |> string.drop_start(2)
  let page = handle_name |> string.ends_with(":page")
  let handle_name = case page {
    True -> handle_name |> string.drop_end(5)
    False -> handle_name
  }
  case dict.get(state.handles, handle_name) {
    Ok(#(_, id, target_path)) -> {
      case page {
        True -> Ok(Attribute(..attr, value: target_path))
        False -> case target_path == option.unwrap(state.path, "") {
          True -> Ok(Attribute(..attr, value: "#" <> id))
          False -> Ok(Attribute(..attr, value: target_path <> "#" <> id))
        }
      }
    }
    _ -> Error(DesugaringWarning(attr.blame, "handle '" <> handle_name <> "' is not assigned"))
  }
}

fn substitute_in_hrefs(
  attrs: List(Attribute),
  state: State,
) -> #(List(Attribute), List(DesugaringWarning)) {
  list.fold(
    attrs,
    #([], []),
    fn(acc, attr) {
      case substitute_in_href(attr, state) {
        Ok(attr) -> #([attr, ..acc.0], acc.1)
        Error(z) -> #([attr, ..acc.0], [z, ..acc.1])
      }
    }
  )
}

fn update_handles(
  state: State,
  vxml: VXML,
) {
  let assert V(_, tag, attributes, _) = vxml
  case tag == "GrandWrapper" {
    True -> State(..state, handles: get_handles_instances_from_grand_wrapper(attributes))
    False -> state
  }
}

fn update_path(
  state: State,
  vxml: VXML,
  inner: InnerParam,
) -> State {
  let assert V(_, _, _, _) = vxml
  case infra.v_first_attribute_with_key(vxml, inner.0) {
    Some(Attribute(_, _, value)) -> State(..state, path: Some(value))
    None -> state
  }
}

fn v_before_transform(
  vxml: VXML,
  state: State,
  inner: InnerParam,
) -> Result(#(VXML, State, List(DesugaringWarning)), DesugaringError) {
  let state =
    state
    |> update_path(vxml, inner)
    |> update_handles(vxml)
  let assert V(_, _, attributes, _) = vxml
  let #(attributes, warnings) = substitute_in_hrefs(attributes, state)
  Ok(#(V(..vxml, attributes: attributes), state, warnings))
}

fn v_after_transform(
  vxml: VXML,
  state: State,
) -> Result(#(List(VXML), State, List(DesugaringWarning)), DesugaringError) {
  let assert V(_, tag, _, children)  = vxml
  case tag == "GrandWrapper" {
    True -> {
      let assert [V(_, _, _, _) as root] = children
      Ok(#([root], state, []))
    }
    False -> Ok(#([vxml], state, []))
  }
}

fn t_transform(
  vxml: VXML,
  state: State,
  inner: InnerParam,
) -> Result(#(List(VXML), State, List(DesugaringWarning)), DesugaringError) {
  let assert T(_, lines)  = vxml
  use #(updated_lines, warnings) <- on.ok(
    process_lines(
      lines,
      state,
      inner,
    )
  )
  Ok(#(updated_lines, state, warnings))
}

fn nodemap_factory(inner: InnerParam) -> n2t.OneToManyBeforeAndAfterStatefulNodeMapWithWarnings(State) {
  n2t.OneToManyBeforeAndAfterStatefulNodeMapWithWarnings(
    v_before_transforming_children: fn(vxml, state) {v_before_transform(vxml, state, inner)},
    v_after_transforming_children: fn(vxml, _, new) {v_after_transform(vxml, new)},
    t_nodemap: fn(vxml, state) { t_transform(vxml, state, inner) },
  )
}

fn transform_factory(inner: InnerParam) -> DesugarerTransform {
  nodemap_factory(inner)
  |> n2t.one_to_many_before_and_after_stateful_nodemap_with_warnings_2_desufarer_transform(State(dict.new(), None))
}

fn param_to_inner_param(param: Param) -> Result(InnerParam, DesugaringError) {
  let assert Ok(handles_regexp) = regexp.from_string("(>>)([\\w\\^-]+(?:\\:page)?)")
  #(
    param.0,
    param.1,
    param.2,
    param.3 |> infra.string_pairs_2_attributes(desugarer_blame(372)),
    param.4 |> infra.string_pairs_2_attributes(desugarer_blame(373)),
    handles_regexp, // inner.5
  )
  |> Ok
}

type IdsDict = Dict(String, List(String))
//                  ↖       ↖
//                  id      list of pages (local paths)
//                          where id appears

type State {
  State(
    ids: IdsDict,
    path: Option(String),
  )
}

type Param = String
//           ↖
//           name of attribute
//           that points to local path
type InnerParam = Param

pub const name = "fix_out_of_page_id_refs"
fn desugarer_blame(line_no: Int) { bl.Des([], name, line_no) }

// 🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️
// 🏖️🏖️ Desugarer 🏖️🏖️
// 🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️
//------------------------------------------------53
/// Expects a document with root 'GrandWrapper'
/// whose attributes comprise of key-value pairs of
/// the form ...
pub fn constructor(param: Param) -> Desugarer {
  Desugarer(
    name: name,
    stringified_param: option.Some(ins(param)),
    stringified_outside: option.None,
    transform: case param_to_inner_param(param) {
      Error(error) -> fn(_) { Error(error) }
      Ok(inner) -> transform_factory(inner)
    },
  )
}

// 🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊
// 🌊🌊🌊 tests 🌊🌊🌊🌊🌊
// 🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊
fn assertive_tests_data() -> List(infra.AssertiveTestData(Param)) {
  []
}

pub fn assertive_tests() {
  infra.assertive_test_collection_from_data(name, assertive_tests_data(), constructor)
}
