import gleam/list
import gleam/option
import gleam/string.{inspect as ins}
import infrastructure.{
  type Desugarer,
  type DesugarerTransform,
  type DesugaringError,
  Desugarer,
} as infra
import nodemaps_2_desugarer_transforms as n2t
import vxml.{
  type VXML,
  type TextLine,
  TextLine,
  T,
  V,
}
import blame.{type Blame}

type HotPayload {
  Hot1(Blame, String)
  Hot2(Blame, List(TextLine), String)
}

type ColdPayload = VXML // a 'T'

type TopOfStack {
  Nothing
  Hot(HotPayload)
  Cold(ColdPayload)
}

type Stack = #(List(VXML), TopOfStack)

fn t_and_word_concatenation(t: ColdPayload, word: String) -> HotPayload {
  let assert T(blame, lines) = t
  let assert [last, ..rest] = lines |> list.reverse
  Hot2(blame, rest, last.content <> word)
}

fn hot_and_word_concatenation(h: HotPayload, word: String) -> HotPayload {
  case h {
    Hot1(blame, string) -> Hot1(blame, string <> word)
    Hot2(blame, lines, string) -> Hot2(blame, lines, string <> word)
  }
}

fn hot_and_t_concatenation(h: HotPayload, t: VXML) -> ColdPayload {
  let assert T(_, [first, ..rest]) = t
  case h {
    Hot1(blame, string) -> {
      let rest = [TextLine(first.blame, first.content <> string), ..rest]
      T(blame, rest)
    }
    Hot2(blame, lines, string) -> {
      let rest = [TextLine(first.blame, first.content <> string), ..rest]
      T(blame, infra.pour(lines, rest))
    }
  }
}

fn smash_cold_t(
  stack: Stack,
  smashee: VXML,
) -> Stack {
  let #(previous, t) = stack
  case t {
    Nothing -> #(previous, Cold(smashee))

    Cold(t) -> #([t, ..previous], Cold(smashee))

    Hot(h) -> {
      let smashee = hot_and_t_concatenation(h, smashee)
      #(previous, Cold(smashee))
    }
  }
}

fn smash_cold_v(
  stack: Stack,
  smashee: VXML,
) -> Stack {
  let #(previous, t) = stack
  case t {
    Nothing -> #([smashee, ..previous], Nothing)

    Cold(t) -> #([smashee, t, ..previous], Nothing)

    Hot(Hot1(blame, string)) -> {
      let t = T(blame, [TextLine(blame, string)])
      #([smashee, t, ..previous], Nothing)
    }

    Hot(Hot2(blame, lines, string)) -> {
      let t = T(blame, [TextLine(blame, string), ..lines] |> list.reverse)
      #([smashee, t, ..previous], Nothing)
    }
  }
}

fn smash_word(
  stack: Stack,
  blame: Blame,
  word: String,
) -> Stack {
  let #(previous, t) = stack
  case t {
    Nothing -> #(previous, Hot(Hot1(blame, word)))

    Cold(t) -> {
      let smashee = t_and_word_concatenation(t, word)
      #(previous, Hot(smashee))
    }

    Hot(h) -> {
      let smashee = hot_and_word_concatenation(h, word)
      #(previous, Hot(smashee))
    }
  }
}

fn accumulator(
  inner: InnerParam,
  stack: Stack,
  remaining: List(VXML),
) -> List(VXML) {
  case remaining {
    [] -> case stack {
      #(previous, Nothing) -> previous |> list.reverse
      #(previous, Hot(Hot1(blame, string))) -> {
        let t = T(blame, [TextLine(blame, string)])
        [t, ..previous] |> list.reverse
      }
      #(previous, Hot(Hot2(blame, lines, string))) -> {
        let t = T(blame, [TextLine(blame, string), ..lines] |> list.reverse)
        [t, ..previous] |> list.reverse
      }
      #(previous, Cold(t)) -> [t, ..previous] |> list.reverse
    }
    [T(..) as first, ..rest] -> {
      let stack = smash_cold_t(stack, first)
      accumulator(inner, stack, rest)
    }

    // attempt to optimize putting != case first:
    [V(_, tag, _, _) as first, ..rest] if tag != inner.0 -> {
      let stack = smash_cold_v(stack, first)
      accumulator(inner, stack, rest)
    }

    [V(blame, _, _, _), ..rest] -> {
      let stack = smash_word(stack, blame, inner.1)
      accumulator(inner, stack, rest)
    }
  }
}

fn nodemap(
  node: VXML,
  inner: InnerParam,
) -> Result(VXML, DesugaringError) {
  case node {
    T(..) -> Ok(node)
    V(_, _, _, children) -> {
      let children = accumulator(inner, #([], Nothing), children)
      Ok(V(..node, children: children))
    }
  }
}

fn nodemap_factory(inner: InnerParam) -> n2t.OneToOneNodeMap {
  nodemap(_, inner)
}

fn transform_factory(inner: InnerParam) -> DesugarerTransform {
  n2t.one_to_one_nodemap_2_desugarer_transform(nodemap_factory(inner))
}

fn param_to_inner_param(param: Param) -> Result(InnerParam, DesugaringError) {
  Ok(param)
}

type Param = #(String,      String)
//             ↖            ↖
//             tag name     replacement
//                          tag to use
type InnerParam = Param

pub const name = "fold_into_text_new_version"

// 🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️
// 🏖️🏖️ Desugarer 🏖️🏖️
// 🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️
//------------------------------------------------53
/// seemingly replaces specified tags by specified
/// strings that are glued to surrounding text nodes
/// (in end-of-last-line glued to beginning-of-first-line
/// fashion), without regards for the tag's contents
/// or attributes, that are destroyed in the process
pub fn constructor(param: Param) -> Desugarer {
  Desugarer(
    name: name,
    stringified_param: option.Some(ins(param)),
    stringified_outside: option.None,
    transform: case param_to_inner_param(param) {
      Error(error) -> fn(_) { Error(error) }
      Ok(inner) -> transform_factory(inner)
    },
  )
}

// 🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊
// 🌊🌊🌊 tests 🌊🌊🌊🌊🌊
// 🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊
fn assertive_tests_data() -> List(infra.AssertiveTestData(Param)) {
  []
}

pub fn assertive_tests() {
  infra.assertive_test_collection_from_data(name, assertive_tests_data(), constructor)
}
