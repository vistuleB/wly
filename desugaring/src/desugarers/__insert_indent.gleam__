import gleam/option
import infrastructure.{type Desugarer, Desugarer, type DesugarerTransform, type DesugaringError} as infra
import nodemaps_2_desugarer_transforms as n2t
import vxml.{type VXML, BlamedAttribute, T, V}

fn nodemap(
  node: VXML,
  ancestors: List(VXML),
  previous_unmapped_siblings: List(VXML),
  _: List(VXML),
  _: List(VXML),
) -> Result(VXML, DesugaringError) {
  case node {
    T(_, _) -> Ok(node)
    V(blame, "VerticalChunk", attrs, children) -> {
      case previous_unmapped_siblings {
        [V(_, "VerticalChunk", _, _), ..] -> {
          case
            infra.contains_one_of_tags(ancestors, [
              "CentralDisplay", "CentralDisplayItalic",
            ])
          {
            True -> Ok(node)
            False ->
              Ok(V(
                blame,
                "VerticalChunk",
                [BlamedAttribute(blame, "indent", "true"), ..attrs],
                children,
              ))
          }
        }
        _ -> Ok(node)
      }
    }
    V(_, _, _, _) -> Ok(node)
  }
}

fn nodemap_factory(_: InnerParam) -> n2t.FancyOneToOneNodeMap {
  nodemap
}

fn desugarer_factory(inner: InnerParam) -> DesugarerTransform {
  n2t.fancy_one_to_one_nodemap_2_desugarer_transform(nodemap_factory(inner))
}

fn param_to_inner_param(param: Param) -> Result(InnerParam, DesugaringError) {
  Ok(param)
}

type Param = Nil
type InnerParam = Nil

/// Adds an 'indent true' attribute-value pair
/// to VerticalChunk nodes that directly follow
/// VerticalChunk nodes
pub fn insert_indent(param: Param) -> Desugarer {
  Desugarer(
    description: DesugarerDescription(
      name: "insert_indent",
      stringified_param: option.None,
    "
/// Adds an 'indent true' attribute-value pair
/// to VerticalChunk nodes that whose previous
/// sibling is also a VerticalChunk node
    ",
    case param_to_inner_param(param) {
      Error(error) -> fn(_) { Error(error) }
      Ok(inner) -> desugarer_factory(inner)
    }
  )
}
