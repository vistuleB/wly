import gleam/result
import gleam/dict.{type Dict}
import gleam/list
import gleam/option
import gleam/string.{inspect as ins}
import infrastructure.{type Desugarer, Desugarer, type DesugarerTransform, type DesugaringError} as infra
import nodemaps_2_desugarer_transforms as n2t
import vxml.{type VXML, T, V}

fn get_absorbing_tags(
  vxml: VXML,
  inner: InnerParam,
) -> List(String) {
  case vxml {
    T(_, _) -> []
    V(_, tag, _, _) -> 
      dict.get(inner, tag)
      |> result.map_error(fn(_){[]})
      |> result.unwrap_both
  }
}

fn update_children(
  children: List(VXML),
  inner: InnerParam,
) -> List(VXML) {
  use #(first, rest) <- on.error_ok(
    infra.first_rest(children),
    fn(_) {[]},
  )

  let first_tags_to_be_absorbed = get_absorbing_tags(first, inner)

  list.fold(
    over: rest,
    from: #(first, [], first_tags_to_be_absorbed),
    with: fn(
      state: #(VXML, List(VXML), List(String)),
      incoming: VXML,
    ) -> #(VXML, List(VXML), List(String)) {
      let #(previous_sibling, already_bundled, tags_to_be_absorbed) = state
      case incoming {
        T(_, _) -> #(incoming, [previous_sibling, ..already_bundled], [])
        V(_, incoming_tag, _, _) -> {
          case list.contains(tags_to_be_absorbed, incoming_tag) {
            False -> #(
              incoming,
              [previous_sibling, ..already_bundled],
              get_absorbing_tags(incoming, inner),
            )
            True -> {
              let assert V(_, _, _, prev_children) = previous_sibling
              #(
                V(..previous_sibling, children: list.append(prev_children, [incoming])),
                already_bundled,
                tags_to_be_absorbed,
              )
            }
          }
        }
      }
    }
  )
  |> fn (state) {[state.0, ..state.1]}
  |> list.reverse
}

fn nodemap(
  node: VXML,
  inner: InnerParam,
) -> VXML {
  case node {
    V(blame, tag, attributes, children) ->
      V(blame, tag, attributes, update_children(children, inner))
    _ -> node
  }
}

fn nodemap_factory(inner: InnerParam) -> n2t.OneToOneNoErrorNodeMap {
  nodemap(_, inner)
}

fn transform_factory(inner: InnerParam) -> DesugarerTransform {
  nodemap_factory(inner)
  |> n2t.one_to_one_no_error_nodemap_2_desugarer_transform()
}

fn param_to_inner_param(param: Param) -> Result(InnerParam, DesugaringError) {
  Ok(infra.aggregate_on_first(param))
}

type Param = List(#(String,        String))
//                  â†–              â†–
//                  tag that       tag that will
//                  will absorb    be absorbed by
//                  next sibling   previous sibling
type InnerParam = Dict(String, List(String))

const name = "absorb_next_sibling_while"
const constructor = absorb_next_sibling_while

//------------------------------------------------53
/// if the arguments are [#("Tag1", "Child1"),
/// ("Tag1", "Child1")] then will cause Tag1
/// nodes to absorb all subsequent Child1 & Child2
/// nodes, as long as they come immediately after
/// Tag1 (in any order)
pub fn absorb_next_sibling_while(param: Param) -> Desugarer {
  Desugarer(
    name,
    option.Some(ins(param)),
    "
/// if the arguments are [#(\"Tag1\", \"Child1\"), 
/// (\"Tag1\", \"Child1\")] then will cause Tag1
/// nodes to absorb all subsequent Child1 & Child2
/// nodes, as long as they come immediately after
/// Tag1 (in any order)
    ",
    case param_to_inner_param(param) {
      Error(error) -> fn(_) { Error(error) }
      Ok(inner) -> transform_factory(inner)
    }
  )
}

// ðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠ
// ðŸŒŠðŸŒŠðŸŒŠ tests ðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠ
// ðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠðŸŒŠ
fn assertive_tests_data() -> List(infra.AssertiveTestData(Param)) {
  [
    infra.AssertiveTestData(
      param: [#("Absorber", "Absorbee")],
      source:   "
                  <> Root
                    <> Absorber
                      <> 
                        \"text\"
                    <> Absorbee
                    <> last
                ",
      expected: "
                  <> Root
                    <> Absorber
                      <> 
                        \"text\"
                      <> Absorbee
                    <> last
                ",
    ),
    infra.AssertiveTestData(
      param: [#("Absorber", "Absorbee")],
      source:   "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                  <> Absorbee
                  <> Absorbee
                  <> last
                ",
      expected: "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                    <> Absorbee
                    <> Absorbee
                  <> last
                ",
    ),
    infra.AssertiveTestData(
      param: [#("Absorber", "Absorbee")],
      source:   "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                  <> Absorbee
                  <> last
                  <> Absorbee
                ",
      expected: "
                <> Root
                  <> Absorber
                    <> 
                      \"text\"
                    <> Absorbee
                  <> last
                  <> Absorbee
                "
    ),
  ]
}

pub fn assertive_tests() {
  infra.assertive_test_collection_from_data(name, assertive_tests_data(), constructor)
}