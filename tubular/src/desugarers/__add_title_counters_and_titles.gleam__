import gleam/list
import gleam/option.{Some}
import gleam/string.{inspect as ins}
import infrastructure.{
  type Desugarer, type DesugaringError, type Pipe,
  DesugaringError, Pipe,
} as infra
import nodemaps_2_desugarer_transforms as n2t
import nodemaps_2_desugarer_transforms as n2t
import vxml.{type VXML, BlamedAttribute, BlamedContent, T, V}

fn param_transform(
  node: VXML,
  ancestors: List(VXML),
  _: List(VXML),
  _: List(VXML),
  _: List(VXML),
  tuples: Extra,
) -> Result(VXML, DesugaringError) {
  case node {
    T(_, _) -> Ok(node)
    V(blame, tag, _, children) -> {
      let new_node = {
        tuples
        |> list.fold(from: node, with: fn(current_node, tuple) -> VXML {
          let #(parent, counter_name, _, _, _) = tuple
          let assert V(_, _, current_attributes, _) = current_node
          case parent == tag {
            False -> current_node
            True -> {
              let new_attribute =
                BlamedAttribute(blame, "counter", counter_name)
              V(blame, tag, [new_attribute, ..current_attributes], children)
            }
          }
        })
      }
      let newest_node = {
        tuples
        |> list.fold(from: new_node, with: fn(current_node, tuple) -> VXML {
          let #(tag_that_declared_counter, counter_name, node_name, pre, post) =
            tuple
          case
            node_name == tag
            && list.any(ancestors, fn(ancestor) {
              let assert V(_, ancestor_tag, _, _) = ancestor
              ancestor_tag == tag_that_declared_counter
            })
          {
            False -> current_node
            True -> {
              let assert V(_, _, newest_attributes, current_children) =
                current_node
              let new_children = [
                T(blame, [
                  BlamedContent(blame, pre <> "::++" <> counter_name <> post),
                ]),
                ..current_children
              ]
              V(blame, tag, newest_attributes, new_children)
            }
          }
        })
      }
      Ok(newest_node)
    }
  }
}

fn nodemap_factory(extra: Extra) -> infra.FancyOneToOneNodeMap {
  fn(node, ancestors, s1, s2, s3) {
    param_transform(node, ancestors, s1, s2, s3, extra)
  }
}

fn desugarer_factory(extra: Extra) -> Desugarer {
  n2t.fancy_one_to_one_nodemap_2_desugarer_transform(nodemap_factory(extra))
}

//**********************************
// type Extra = List(#(String,         String,       String,        String,         String))
//                       ↖ parent or     ↖ counter     ↖ element      ↖ pre-counter   ↖ post-counter
//                         ancestor        name          to add         phrase          phrase
//                         tag that                      title to
//                         contains
//                         counter
//**********************************

type Extra =
  List(#(String, String, String, String, String))

pub fn add_title_counters_and_titles(extra: Extra) -> Desugarer {
  Desugarer(
    description: DesugarerDescription(
      "add_title_counters_and_titles",
      Some(ins(extra)),
      "...",
    ),
    desugarer: desugarer_factory(extra),
  )
}
