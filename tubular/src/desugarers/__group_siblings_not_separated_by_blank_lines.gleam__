import blamedlines.{type Blame}
import gleam/list
import gleam/option
import gleam/string.{inspect as ins}
import infrastructure.{type Desugarer, Desugarer, type DesugarerTransform, type DesugaringError} as infra
import nodemaps_2_desugarer_transforms as n2t
import vxml.{type VXML, T, V}

fn lists_of_non_blank_line_chunks(
  vxmls: List(VXML),
) -> List(#(Blame, List(VXML))) {
  infra.either_or_misceginator(vxmls, infra.is_tag(_, "WriterlyBlankLine"))
  |> infra.regroup_ors_no_empty_lists
  |> infra.remove_eithers_unwrap_ors
  |> list.map(fn(vxmls: List(VXML)) {
    #(infra.assert_get_first_blame(vxmls), vxmls)
  })
}

pub fn chunk_constructor(
  blame_and_children: #(Blame, List(VXML)),
  wrapper: String,
) -> VXML {
  let #(blame, children) = blame_and_children
  V(blame, wrapper, [], children)
}

fn nodemap(
  vxml: VXML,
  inner: InnerParam,
) -> Result(VXML, DesugaringError) {
  case vxml {
    T(_, _) -> Ok(vxml)
    V(blame, tag, attrs, children) -> {
      let new_children =
        lists_of_non_blank_line_chunks(children)
        |> list.map(chunk_constructor(_, inner.0))
      Ok(V(blame, tag, attrs, new_children))
    }
  }
}

fn nodemap_factory(inner: InnerParam) -> n2t.FancyOneToOneNodeMap {
  n2t.prevent_one_to_one_nodemap_inside(
    nodemap(_, inner),
    inner.1,
  )
}

fn desugarer_factory(inner: InnerParam) -> DesugarerTransform {
  n2t.fancy_one_to_one_nodemap_2_desugarer_transform(nodemap_factory(inner))
}

fn param_to_inner_param(param: Param) -> Result(InnerParam, DesugaringError) {
  Ok(param)
}

type Param =
  #(String,   List(String))
//  ↖         ↖
//  name of   keep out
//  wrapper   of these
//  tag

type InnerParam = Param

const name = "group_siblings_not_separated_by_blank_lines"
const constructor = group_siblings_not_separated_by_blank_lines

// 🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️
// 🏖️🏖️ Desugarer 🏖️🏖️
// 🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️🏖️
//------------------------------------------------53
/// wrap siblings that are not separated by
/// WriterlyBlankLine inside a designated tag and
/// remove WriterlyBlankLine elements; stays out of
/// subtrees designated by tags in the second 
/// 'List(String)' argument
pub fn group_siblings_not_separated_by_blank_lines(param: Param) -> Desugarer {
  Desugarer(
    name,
    option.Some(ins(param)),
    "
/// wrap siblings that are not separated by
/// WriterlyBlankLine inside a designated tag and
/// remove WriterlyBlankLine elements; stays out of
/// subtrees designated by tags in the second 
/// 'List(String)' argument
    ",
    case param_to_inner_param(param) {
      Error(error) -> fn(_) { Error(error)}
      Ok(inner) -> desugarer_factory(inner)
    }
  )
}

// 🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊
// 🌊🌊🌊 tests 🌊🌊🌊🌊🌊
// 🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊🌊
fn assertive_tests_data() -> List(infra.AssertiveTestData(Param)) {
  [
    infra.AssertiveTestData(
      param: #("hello", ["div"]),
      source:    "
                 ",
      expected:  "
                 ",
    )
  ]
}

pub fn assertive_tests() {
  infra.assertive_test_collection_from_data(name, assertive_tests_data(), constructor)
}